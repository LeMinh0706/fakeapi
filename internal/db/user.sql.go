// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users(
  email, hashed_password
) VALUES (
  $1, $2
)
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.HashedPassword)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, hashed_password FROM users WHERE email = $1
`

type GetUserByUsernameRow struct {
	ID             int32  `json:"id"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, email string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, email)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.Email, &i.HashedPassword)
	return i, err
}
