// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: candidate.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getCandidate = `-- name: GetCandidate :many
SELECT id, applied_position, email FROM candidate
`

type GetCandidateRow struct {
	ID              uuid.UUID `json:"id"`
	AppliedPosition string    `json:"applied_position"`
	Email           string    `json:"email"`
}

func (q *Queries) GetCandidate(ctx context.Context) ([]GetCandidateRow, error) {
	rows, err := q.db.QueryContext(ctx, getCandidate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCandidateRow{}
	for rows.Next() {
		var i GetCandidateRow
		if err := rows.Scan(&i.ID, &i.AppliedPosition, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
